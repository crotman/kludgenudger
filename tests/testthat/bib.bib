@ARTICLE{8852726,
  author={C. {Gavidia-Calderon} and F. {Sarro} and M. {Harman} and E. T. {Barr}},
  journal={IEEE Transactions on Software Engineering}, 
  title={The Assessor's Dilemma: Improving Bug Repair via Empirical Game Theory}, 
  year={2019},
  volume={},
  number={},
  pages={1-1},}
  
  
  @article{GAVIDIACALDERON2020110424,
title = "Game-theoretic analysis of development practices: Challenges and opportunities",
journal = "Journal of Systems and Software",
volume = "159",
pages = "110424",
year = "2020",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2019.110424",
url = "http://www.sciencedirect.com/science/article/pii/S0164121219301980",
author = "Carlos Gavidia-Calderon and Federica Sarro and Mark Harman and Earl T. Barr",
keywords = "Game theory, Empirical analysis, Technical debt, Software engineering practices",
abstract = "Developers continuously invent new practices, usually grounded in hard-won experience, not theory. Game theory studies cooperation and conflict; its use will speed the development of effective processes. A survey of game theory in software engineering finds highly idealised models that are rarely based on process data. This is because software processes are hard to analyse using traditional game theory since they generate huge game models. We are the first to show how to use game abstractions, developed in artificial intelligence, to produce tractable game-theoretic models of software practices. We present Game-Theoretic Process Improvement (GTPI), built on top of empirical game-theoretic analysis. Some teams fall into the habit of preferring “quick-and-dirty” code to slow-to-write, careful code, incurring technical debt. We showcase GTPI’s ability to diagnose and improve such a development process. Using GTPI, we discover a lightweight intervention that incentivises developers to write careful code: add a singlecode reviewer who needs to catch only 25% of kludges. This 25% accuracy is key; it means that a reviewer does not need to examine each commit in depth, making this process intervention cost-effective."
}


@article{Potdar2014,
abstract = {Throughout a software development life cycle, developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. Such incomplete or temporary workarounds are commonly referred to as 'technical debt'. Our experience indicates that self-admitted technical debt is common in software projects and may negatively impact software maintenance, however, to date very little is known about them. Therefore, in this paper, we use source-code comments in four large open source software projects-Eclipse, Chromium OS, Apache HTTP Server, and ArgoUML to identify self-admitted technical debt. Using the identified technical debt, we study 1) the amount of self-admitted technical debt found in these projects, 2) why this self-admitted technical debt was introduced into the software projects and 3) how likely is the self-admitted technical debt to be removed after their introduction. We find that the amount of self-admitted technical debt exists in 2.4{\%} - 31{\%} of the files. Furthermore, we find that developers with higher experience tend to introduce most of the self-admitted technical debt and that time pressures and complexity of the code do not correlate with the amount of self-admitted technical debt. Lastly, although self-admitted technical debt is meant to be addressed or removed in the future, only between 26.3{\%} - 63.5{\%} of self-admitted technical debt gets removed from projects after introduction.},
author = {Potdar, Aniket and Shihab, Emad},
doi = {10.1109/ICSME.2014.31},
isbn = {9780769553030},
journal = {Proceedings - 30th International Conference on Software Maintenance and Evolution, ICSME 2014},
keywords = {Software comments,Technical debt},
pages = {91--100},
title = {{An exploratory study on self-admitted technical debt}},
year = {2014}
}



@misc{Sierra2019,
abstract = {Technical Debt is a metaphor used to express sub-optimal source code implementations that are introduced for short-term benefits that often need to be paid back later, at an increased cost. In recent years, various empirical studies have focused on investigating source code comments that indicate Technical Debt often referred to as Self-Admitted Technical Debt (SATD). Since the introduction of SATD as a concept, an increasing number of studies have examined various aspects pertaining to SATD. Therefore, in this paper we survey research work on SATD, analyzing the characteristics of current approaches and techniques for SATD detection, comprehension, and repayment. To motivate the submission of novel and improved work, we compile tools, resources, and data sets made available to replicate or extend current SATD research. To set the stage for future work, we identify open challenges in the study of SATD, areas that are missing investigation, and discuss potential future research avenues.},
author = {Sierra, Giancarlo and Shihab, Emad and Kamei, Yasutaka},
booktitle = {Journal of Systems and Software},
doi = {10.1016/j.jss.2019.02.056},
file = {:C$\backslash$:/Users/Home/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sierra, Shihab, Kamei - 2019 - A survey of self-admitted technical debt(2).pdf:pdf},
issn = {01641212},
keywords = {Literature survey,Self admitted technical debt,Software maintenance,Source code comments},
mendeley-groups = {Doutorado/technical debt},
month = {jun},
pages = {70--82},
publisher = {Elsevier Inc.},
title = {{A survey of self-admitted technical debt}},
volume = {152},
year = {2019}
}

@misc{Wehaibi2016,
author = {Wehaibi, Sultan},
booktitle = {Github},
mendeley-groups = {Doutorado/technical debt},
title = {satd-patterns},
url = {https://github.com/xsultan/satd-patterns},
year = {2016}
}


