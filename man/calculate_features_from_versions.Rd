% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{calculate_features_from_versions}
\alias{calculate_features_from_versions}
\title{Calculate features from combinations of PMD alerts of a new and an old version of source code}
\usage{
calculate_features_from_versions(
  code_file_new = "",
  code_file_old = "",
  code_new = "",
  code_old = "",
  pmd_path,
  rule_path = "rulesets/java/quickstart.xml",
  blockrules_location = "data/blockrules/blockrules.xml",
  mostra_new = c(10, 43, 17, 15, 18, 16, 45, 44),
  mostra_old = c(10, 42, 41, 15, 16, 43),
  glue_string = ""
)
}
\arguments{
\item{code_file_new}{file containing the source code of the new version. If this parameter is empty, the parameter code_new is used}

\item{code_file_old}{file containing the source code of the old version. If this parameter is empty, the parameter code_old is used}

\item{code_new}{source code of the new version. If this parameter is empty, the parameter code_file_new is used}

\item{code_old}{source code of the old version. If this parameter is empty, the parameter code_file_old is used}

\item{pmd_path}{complete path to pmd.bat including the name of the file}

\item{rule_path}{path to the rules used for the PMD alerts}

\item{blockrules_location}{path to the rules for the Abstract Syntax Tree}

\item{mostra_new}{which nodes of the new version must appear?}

\item{mostra_old}{which nodes of the old version must appear?}

\item{glue_string}{template of a string that will be passed to str_glue and will be available in the returned info}
}
\value{
a list with information about the comparison between old and new versions.
The list contains the following items:
\itemize{
\item versions_executed: a dataframe containing the PMD alerts generated for each version
\item versions_crossed: a dataframe containing information about the combination of versions including a map between the lines of code in the new and in the old version
\item graph_old_with_alert: a tidygraph containing the abstract syntax tree of the old version and information about PMD alerts
\item graph_new_with_alert: a tidygraph containing the abstract syntax tree of the new version and information about PMD alerts
\item graph_old_with_group: a tidygraph containing the abstract syntax tree of the old version and information about PMD alerts.
Here, the nodes of the new and the old versions are categorized in groups
\item graph_new_with_group: a tidygraph containing the abstract syntax tree of the new version and information about PMD alerts.
Here, the nodes of the new and the old versions are categorized in groups
\item graphs_from_alerts_old: a dataframe containing, for each alert of the old version, the path from the node related to the alert to the root node (compilation unit), in a tidygraph
\item graphs_from_alerts_new: a dataframe containing, for each alert of the new version, the path from the node related to the alert to the root node (compilation unit), in a tidygraph
\item features: a dataframe containing, for each combination of old and new alert, the features related to the combinations
\item categorised_alerts: dataframe with old and new alerts categorised in fixed, open and new
}
}
\description{
Reads or gets as input two versions of source codes, a new and an old, and returns the info about the alerts and the combination between the alerts.
The main output are the features related to combinations of an alerts: an alert from the new version and an alert from the old version.
All the combinations between an old alert and a new alert are considered.
The main goal is to differentiate between Fixed, Old and New alerts.
If a combination of alerts from the new and the old versions have many features that indicate they have the same role in the code, the alert in the new version may be considered an old alert.
}
